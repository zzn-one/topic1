{"ast":null,"code":"import jwt_prase from '@/assets/js/jwtPrase';\nexport default {\n  name: \"DialogAddTask\",\n  props: ['visible'],\n  emits: ['close'],\n  data() {\n    var validateStartTime = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请选择开始日期'));\n      } else if (value <= new Date()) {\n        callback(new Error('开始日期不能为过去的时间！'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      dialogVisible: false,\n      majorList: [],\n      taskForm: {\n        name: '',\n        year: '',\n        college: '',\n        major: '',\n        startTime: '',\n        duration: '',\n        publishBy: '',\n        publishTime: '',\n        publishName: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入任务名称',\n          trigger: 'blur'\n        }],\n        year: [{\n          required: true,\n          message: '请选择毕业届数',\n          trigger: 'change'\n        }],\n        startTime: [{\n          validator: validateStartTime,\n          trigger: 'change'\n        }],\n        duration: [{\n          required: true,\n          message: '请填写选课时长',\n          trigger: 'blur'\n        }],\n        college: [{\n          required: true,\n          message: '请选择学院',\n          trigger: 'change'\n        }],\n        major: [{\n          required: true,\n          message: '请选择专业',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  methods: {\n    //新增任务\n    publish() {\n      console.log(\"验证\");\n      this.$refs['addTaskForm'].validate(valid => {\n        if (valid) {\n          //验证通过\n          console.log(\"成功\");\n          this.addTask();\n        } else {\n          //验证不通过\n          console.log(\"失败\");\n          return false;\n        }\n      });\n    },\n    async addTask() {\n      this.taskForm.publishBy = jwt_prase().id;\n      this.taskForm.publishName = jwt_prase().name;\n      this.taskForm.publishTime = new Date().toJSON();\n      //处理date类型的数据\n      if (typeof this.taskForm.startTime === 'object') {\n        this.taskForm.startTime = this.taskForm.startTime.toJSON();\n      }\n      const resp = await this.$http({\n        method: \"post\",\n        url: '/task',\n        data: this.taskForm\n      });\n      console.log(resp);\n      if (resp.data.code === 200) {\n        if (resp.data.data === true) {\n          this.$message({\n            message: resp.data.msg,\n            type: \"success\"\n          });\n          this.closeDialog();\n        } else {\n          this.$message({\n            message: resp.data.msg,\n            type: \"error\"\n          });\n        }\n      }\n    },\n    //发送请求获取majorList\n    async getMajorList() {\n      this.taskForm.college = jwt_prase().college;\n      this.taskForm.year = localStorage.getItem(\"year\");\n      const resp = await this.$http.get('/dict/major/college/' + jwt_prase().college);\n      if (resp.data.code === 200) {\n        this.majorList = resp.data.data;\n      }\n    },\n    closeDialog() {\n      this.dialogVisible = false;\n      this.$emit('close', false);\n    }\n  },\n  async created() {\n    this.getMajorList();\n  },\n  watch: {\n    visible(val) {\n      this.dialogVisible = val;\n    }\n  }\n};","map":{"version":3,"mappings":"AAkCA;AAEA;EACAA;EACAC;EACAC;EACAC;IACA;MACA;QACAC;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACAC;MACAC;MACAC;QACAP;QACAQ;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAhB,OACA;UAAAiB;UAAAC;UAAAC;QAAA,EACA;QACAX,OACA;UAAAS;UAAAC;UAAAC;QAAA,EACA;QACAR,YACA;UAAAS;UAAAD;QAAA,EACA;QACAP,WACA;UAAAK;UAAAC;UAAAC;QAAA,EACA;QACAV,UACA;UAAAQ;UAAAC;UAAAC;QAAA,EACA;QACAT,QACA;UAAAO;UAAAC;UAAAC;QAAA;MAGA;IACA;EACA;EACAE;IACA;IACAC;MACAC;MACA;QACA;UACA;UACAA;UACA;QAEA;UACA;UACAA;UACA;QACA;MACA;IACA;IAEA;MACA;MACA;MACA;MACA;MACA;QACA;MACA;MAEA,8BACA;QACAC;QACAC;QACAtB;MACA,EACA;MAEAoB;MAEA;QACA;UAEA;YACAL;YACAQ;UACA;UACA;QACA;UACA;YACAR;YACAQ;UACA;QACA;MACA;IAEA;IAEA;IACA;MACA;MACA;MACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA;IACA;EAEA;EACA;IACA;EACA;EACAC;IACAC;MACA;IACA;EAEA;AACA","names":["name","props","emits","data","callback","dialogVisible","majorList","taskForm","year","college","major","startTime","duration","publishBy","publishTime","publishName","rules","required","message","trigger","validator","methods","publish","console","method","url","type","closeDialog","watch","visible"],"sourceRoot":"src/components/home/admin","sources":["DialogAddTask.vue"],"sourcesContent":["<template>\r\n    <el-dialog title=\"发布选题任务\" center :visible.sync=\"dialogVisible\" width=\"600px\" @close=\"closeDialog\">\r\n        <div class=\"form_div\">\r\n            <el-form :model=\"taskForm\" label-position=\"left\" label-width=\"120px\" :rules=\"rules\" ref=\"addTaskForm\">\r\n                <el-form-item label=\"任务名称\" prop=\"name\">\r\n                    <el-input v-model=\"taskForm.name\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"届数\" prop=\"year\">\r\n                    <el-input v-model=\"taskForm.year\" autocomplete=\"off\" disabled></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item label=\"专业\" prop=\"major\">\r\n                    <el-select v-model=\"taskForm.major\" placeholder=\"请选择专业\">\r\n                        <el-option v-for=\"item in majorList\" :label=\"item.description\" :key=\"item.major\"\r\n                            :value=\"item.major\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item label=\"任务开始时间\" prop=\"startTime\">\r\n                    <el-date-picker v-model=\"taskForm.startTime\" type=\"datetime\" placeholder=\"选择任务开始时间\">\r\n                    </el-date-picker>\r\n                </el-form-item>\r\n                <el-form-item label=\"选课时长(分钟)\" prop=\"duration\">\r\n                    <el-input v-model.number=\"taskForm.duration\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n        <div slot=\"footer\" class=\"dialog_footer\">\r\n            <el-button plain type=\"primary\" class=\"dialog_footer_btn\" @click=\"publish\">发 布</el-button>\r\n            <el-button plain type=\"danger\" class=\"dialog_footer_btn\" @click=\"closeDialog\">取 消</el-button>\r\n\r\n        </div>\r\n    </el-dialog>\r\n</template>\r\n<script>\r\nimport jwt_prase from '@/assets/js/jwtPrase'\r\n\r\nexport default {\r\n    name: \"DialogAddTask\",\r\n    props: ['visible'],\r\n    emits: ['close'],\r\n    data() {\r\n        var validateStartTime = (rule, value, callback) => {\r\n            if (value === '') {\r\n                callback(new Error('请选择开始日期'));\r\n            } else if (value <= new Date()) {\r\n                callback(new Error('开始日期不能为过去的时间！'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        return {\r\n            dialogVisible: false,\r\n            majorList: [],\r\n            taskForm: {\r\n                name: '',\r\n                year: '',\r\n                college: '',\r\n                major: '',\r\n                startTime: '',\r\n                duration: '',\r\n                publishBy: '',\r\n                publishTime: '',\r\n                publishName: ''\r\n            },\r\n            rules: {\r\n                name: [\r\n                    { required: true, message: '请输入任务名称', trigger: 'blur' },\r\n                ],\r\n                year: [\r\n                    { required: true, message: '请选择毕业届数', trigger: 'change' }\r\n                ],\r\n                startTime: [\r\n                    { validator: validateStartTime, trigger: 'change' }\r\n                ],\r\n                duration: [\r\n                    { required: true, message: '请填写选课时长', trigger: 'blur' }\r\n                ],\r\n                college: [\r\n                    { required: true, message: '请选择学院', trigger: 'change' }\r\n                ],\r\n                major: [\r\n                    { required: true, message: '请选择专业', trigger: 'change' }\r\n                ],\r\n\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        //新增任务\r\n        publish() {\r\n            console.log(\"验证\");\r\n            this.$refs['addTaskForm'].validate((valid) => {\r\n                if (valid) {\r\n                    //验证通过\r\n                    console.log(\"成功\");\r\n                    this.addTask()\r\n\r\n                } else {\r\n                    //验证不通过\r\n                    console.log(\"失败\");\r\n                    return false\r\n                }\r\n            })\r\n        },\r\n\r\n        async addTask() {\r\n            this.taskForm.publishBy = jwt_prase().id\r\n            this.taskForm.publishName = jwt_prase().name\r\n            this.taskForm.publishTime = new Date().toJSON()\r\n            //处理date类型的数据\r\n            if (typeof (this.taskForm.startTime) === 'object') {\r\n                this.taskForm.startTime = this.taskForm.startTime.toJSON()\r\n            }\r\n\r\n            const resp = await this.$http(\r\n                {\r\n                    method: \"post\",\r\n                    url: '/task',\r\n                    data: this.taskForm\r\n                }\r\n            )\r\n\r\n            console.log(resp);\r\n\r\n            if (resp.data.code === 200) {\r\n                if (resp.data.data === true) {\r\n\r\n                    this.$message({\r\n                        message: resp.data.msg,\r\n                        type: \"success\"\r\n                    })\r\n                    this.closeDialog()\r\n                } else {\r\n                    this.$message({\r\n                        message: resp.data.msg,\r\n                        type: \"error\"\r\n                    })\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        //发送请求获取majorList\r\n        async getMajorList() {\r\n            this.taskForm.college = jwt_prase().college\r\n            this.taskForm.year = localStorage.getItem(\"year\")\r\n            const resp = await this.$http.get('/dict/major/college/' + jwt_prase().college)\r\n            if (resp.data.code === 200) {\r\n                this.majorList = resp.data.data\r\n            }\r\n        },\r\n\r\n        closeDialog() {\r\n            this.dialogVisible = false\r\n            this.$emit('close', false)\r\n        }\r\n\r\n    },\r\n    async created() {\r\n        this.getMajorList()\r\n    },\r\n    watch: {\r\n        visible(val) {\r\n            this.dialogVisible = val\r\n        },\r\n\r\n    }\r\n}\r\n</script>\r\n<style scoped lang=\"less\">\r\n/deep/.el-input__inner {\r\n    width: 300px;\r\n}\r\n\r\n.dialog_footer_btn {\r\n    margin-left: 42px;\r\n}\r\n\r\n.dialog_footer {\r\n    margin-bottom: 20px;\r\n    margin-top: -20px;\r\n}\r\n\r\n/deep/.el-form-item {\r\n    margin-left: 60px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}