{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport jwt_prase from '@/assets/js/jwtPrase';\nimport TopicPreview from '@/components/home/student/TopicPreview.vue';\nexport default {\n  name: \"TopicTask\",\n  components: {\n    TopicPreview\n  },\n  data() {\n    return {\n      hasTask: false,\n      finished: false,\n      btnDisabled: true,\n      taskParams: {\n        name: '',\n        college: '',\n        major: '',\n        year: \"\",\n        startTime: '',\n        duration: ''\n      },\n      previewDialogVisible: false\n    };\n  },\n  methods: {\n    topicSelect() {\n      const date = new Date(this.taskParams.startTime);\n      const deadline = date.getTime() + parseInt(this.taskParams.duration) * 60 * 1000;\n      this.$router.push({\n        path: \"/home/student/topicSelect\",\n        query: {\n          \"deadline\": deadline\n        }\n      });\n    },\n    openTopic() {\n      // 发送axios 请求 \n      // 根据 学生的专业  获取所有课题\n      this.previewDialogVisible = true;\n    },\n    openSelectTopicBtn() {\n      this.btnDisabled = false;\n    },\n    //获取任务 根据 year college major\n    async getTask() {\n      //先获取用户信息\n      const userResp = await this.$http.get(\"/userStudent/\" + jwt_prase().id);\n      if (userResp.data.code === 200) {\n        let year = userResp.data.data.graduationYear;\n        let college = userResp.data.data.college;\n        let major = userResp.data.data.major;\n        const taskResp = await this.$http.get(\"/task/\" + year + \"/\" + college + \"/\" + major);\n        console.log(taskResp.data);\n        if (taskResp.data.code === 200 && taskResp.data.data !== null) {\n          //有task\n          this.hasTask = true;\n          this.taskParams = taskResp.data.data;\n          if (this.taskParams.status === 0) {\n            //任务未开始\n            this.finished = false;\n          } else if (this.taskParams.status === 1) {\n            //任务执行中\n            this.finished = false;\n            //启动 进入选题按钮\n            this.openSelectTopicBtn();\n          } else if (this.taskParams.status === 2) {\n            //任务取消，即无任务\n            this.hasTask = false;\n          } else if (this.taskParams.status === 3) {\n            //任务完成\n            this.finished = true;\n          }\n\n          //处理数据\n          const collegeResp = await this.$http.get(\"/dict/college/\" + this.taskParams.college);\n          if (collegeResp.data.code === 200) {\n            this.taskParams.college = collegeResp.data.data.description;\n          }\n          const majorResp = await this.$http.get(\"/dict/major/\" + this.taskParams.major);\n          if (majorResp.data.code === 200) {\n            this.taskParams.major = majorResp.data.data[0].description;\n          }\n          this.taskParams.startTime = new Date(this.taskParams.startTime).getTime();\n        } else {\n          //无task\n          this.hasTask = false;\n        }\n      }\n    }\n  },\n  created() {\n    //获取选题任务\n    this.getTask();\n  }\n};","map":{"version":3,"mappings":";AA+CA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACAP;QACAQ;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;QACAC;QACAC;UACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACA;IACA;MACA;MACA;MAEA;QACA;QACA;QACA;QAEA;QACAC;QACA;UACA;UACA;UACA;UAEA;YACA;YACA;UACA;YACA;YACA;YACA;YACA;UAEA;YACA;YACA;UACA;YACA;YACA;UACA;;UAEA;UACA;UACA;YACA;UACA;UACA;UACA;YACA;UACA;UAEA;QAEA;UACA;UACA;QACA;MACA;IACA;EAEA;EACAC;IACA;IACA;EAEA;AACA","names":["name","components","TopicPreview","data","hasTask","finished","btnDisabled","taskParams","college","major","year","startTime","duration","previewDialogVisible","methods","topicSelect","path","query","openTopic","openSelectTopicBtn","console","created"],"sourceRoot":"src/components/home/student","sources":["TopicTask.vue"],"sourcesContent":["<template>\r\n    <div class=\"main\">\r\n\r\n        <template v-if=\"hasTask\">\r\n            <!-- 如果task的status为3，显示结束 -->\r\n            <template v-if=\"finished\">\r\n                <div class=\"task-div\">\r\n                    <h1>{{ taskParams.year }}届毕业设计选题</h1>\r\n                    <h2>已结束</h2>\r\n                </div>\r\n            </template>\r\n            <!-- 如果没有task 或 task的状态为2 ，显示 -->\r\n            <template v-else>\r\n                <div class=\"task-div\">\r\n                    <el-descriptions :column=\"1\" :title=\"taskParams.name\">\r\n                        <el-descriptions-item label=\"院系\">{{ taskParams.college }}</el-descriptions-item>\r\n                        <el-descriptions-item label=\"专业\">{{ taskParams.major }}</el-descriptions-item>\r\n                        <el-descriptions-item label=\"开始时间\">{{ taskParams.startTime }}</el-descriptions-item>\r\n                        <el-descriptions-item label=\"选题时长\">{{ taskParams.duration }}分钟</el-descriptions-item>\r\n                        <el-descriptions-item label=\"距离任务开始还有\">\r\n                            <el-statistic format=\"HH:mm:ss\" :value=\"taskParams.startTime\" time-indices\r\n                                @finish=\"openSelectTopicBtn\"></el-statistic>\r\n                        </el-descriptions-item>\r\n                    </el-descriptions>\r\n                    <el-row>\r\n                        <el-button type=\"primary\" plain @click=\"openTopic\">预览课题</el-button>\r\n                        <el-button type=\"success\" plain @click=\"topicSelect\"\r\n                            :disabled=\"this.btnDisabled\">进入选题</el-button>\r\n                    </el-row>\r\n                    <div style=\"height:20px\"></div>\r\n                </div>\r\n            </template>\r\n        </template>\r\n        <template v-else>\r\n            <div class=\"task-div\">\r\n                <h1>当前没有选题任务</h1>\r\n            </div>\r\n        </template>\r\n\r\n        <!-- 预览课题页面 -->\r\n        <el-dialog width=\"900px\" title=\"预览课题页面\" :visible.sync=\"previewDialogVisible\">\r\n            <TopicPreview></TopicPreview>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport jwt_prase from '@/assets/js/jwtPrase';\r\nimport TopicPreview from '@/components/home/student/TopicPreview.vue';\r\n\r\nexport default {\r\n    name: \"TopicTask\",\r\n    components: {\r\n        TopicPreview\r\n    },\r\n    data() {\r\n        return {\r\n            hasTask: false,\r\n            finished: false,\r\n            btnDisabled: true,\r\n            taskParams: {\r\n                name: '',\r\n                college: '',\r\n                major: '',\r\n                year: \"\",\r\n                startTime: '',\r\n                duration: ''\r\n            },\r\n            previewDialogVisible: false,\r\n        }\r\n    },\r\n    methods: {\r\n        topicSelect() {\r\n            const date = new Date(this.taskParams.startTime)\r\n            const deadline = date.getTime() + parseInt(this.taskParams.duration) * 60 * 1000\r\n            this.$router.push({\r\n                path: \"/home/student/topicSelect\",\r\n                query: {\r\n                    \"deadline\": deadline\r\n                }\r\n            })\r\n        },\r\n        openTopic() {\r\n            // 发送axios 请求 \r\n            // 根据 学生的专业  获取所有课题\r\n            this.previewDialogVisible = true\r\n        },\r\n        openSelectTopicBtn() {\r\n            this.btnDisabled = false\r\n        },\r\n        //获取任务 根据 year college major\r\n        async getTask() {\r\n            //先获取用户信息\r\n            const userResp = await this.$http.get(\"/userStudent/\" + jwt_prase().id)\r\n\r\n            if (userResp.data.code === 200) {\r\n                let year = userResp.data.data.graduationYear\r\n                let college = userResp.data.data.college\r\n                let major = userResp.data.data.major\r\n\r\n                const taskResp = await this.$http.get(\"/task/\" + year + \"/\" + college + \"/\" + major)\r\n                console.log(taskResp.data);\r\n                if (taskResp.data.code === 200 && taskResp.data.data !== null) {\r\n                    //有task\r\n                    this.hasTask = true\r\n                    this.taskParams = taskResp.data.data\r\n\r\n                    if (this.taskParams.status === 0) {\r\n                        //任务未开始\r\n                        this.finished = false\r\n                    } else if (this.taskParams.status === 1) {\r\n                        //任务执行中\r\n                        this.finished = false\r\n                        //启动 进入选题按钮\r\n                        this.openSelectTopicBtn()\r\n\r\n                    } else if (this.taskParams.status === 2) {\r\n                        //任务取消，即无任务\r\n                        this.hasTask = false\r\n                    } else if (this.taskParams.status === 3) {\r\n                        //任务完成\r\n                        this.finished = true\r\n                    }\r\n\r\n                    //处理数据\r\n                    const collegeResp = await this.$http.get(\"/dict/college/\" + this.taskParams.college)\r\n                    if (collegeResp.data.code === 200) {\r\n                        this.taskParams.college = collegeResp.data.data.description\r\n                    }\r\n                    const majorResp = await this.$http.get(\"/dict/major/\" + this.taskParams.major)\r\n                    if (majorResp.data.code === 200) {\r\n                        this.taskParams.major = majorResp.data.data[0].description\r\n                    }\r\n\r\n                    this.taskParams.startTime = new Date(this.taskParams.startTime).getTime()\r\n\r\n                } else {\r\n                    //无task\r\n                    this.hasTask = false\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    created() {\r\n        //获取选题任务\r\n        this.getTask()\r\n\r\n    }\r\n}\r\n</script>\r\n<style scoped lang=\"less\">\r\n.main {\r\n    line-height: 24px;\r\n}\r\n\r\n.el-timeline {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task-div {\r\n    border: 1px solid rgb(185, 186, 189);\r\n    width: 400px;\r\n    margin: 20px auto;\r\n    background-color: rgba(240, 248, 255, 0.7);\r\n    backdrop-filter: blur(10px);\r\n}\r\n\r\n/deep/.el-statistic .con {\r\n    display: flex;\r\n    justify-content: left;\r\n    align-items: center;\r\n}\r\n\r\n/deep/.el-descriptions__title {\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    margin: 0 auto;\r\n    margin-top: 20px;\r\n}\r\n\r\n/deep/.el-descriptions {\r\n    box-sizing: border-box;\r\n    font-size: 18px;\r\n    color: #303133;\r\n    margin-bottom: 20px;\r\n\r\n}\r\n\r\n/deep/.el-descriptions-item__label:not(.is-bordered-label) {\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n    width: 200px;\r\n    color: #000000;\r\n}\r\n\r\n/deep/.el-descriptions__body {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    backdrop-filter: blur(10px);\r\n}\r\n\r\n/deep/.el-dialog {\r\n\r\n    background: rgba(255, 255, 255, 0.9);\r\n\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}